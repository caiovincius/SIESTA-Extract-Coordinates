#!/bin/bash

#Este script irá criar uma estrutura de grafeno. Para executar basta abrir um terminal na pasta do script e digitar o comando: ./script_graphene
#Caso ocorra algum erro ao executar o script, digite o comando: chmod +x script_graphene, e tente executar novamente

#Pronto! Não altere código abaixo.
#Bz: Caio Vinícius Caetano Ribeiro da Silva - caioviniciuscaetano@hotmail.com

echo "Qual a distância de ligação (em Angstrons)?"
read distance

echo "Dê um nome para o arquivo da estrutura "
read nome_xyz

pi=`awk 'BEGIN {pi = atan2(0, -1); printf "%2f", pi}'`
x_i=0.0000000
y_i=0.0000000
z_i=0.0000000

echo -e "8\n" > $nome_xyz
x=`echo $x_i | awk -v d=$distance -v p=$pi 'BEGIN {x=( $1+d*sin(p/3) ); printf "%0.8f", x'}`
z=`echo $x $y_i | awk -v x=$x -v d=$distance -v p=$pi 'BEGIN {z=( $2 + sqrt( (2*d*d)*(1-cos(p/3))-x*x ) ); printf "%0.8f", " "z}'`
echo C $x $y_i $z >> $nome_xyz

x1=$x_i
z1=`awk -v x=$x1 -v d=$distance -v p=$pi 'BEGIN {z=( sqrt( (2*d*d)*(1-cos(p/3)) -x*x ) ); printf "%0.8f", " "z}'`
echo N $x1 $y_i $z1 >> $nome_xyz

x2=-$x
z2=`awk -v x=$x2 -v d=$distance -v p=$pi 'BEGIN {z=( sqrt( (2*d*d)*(1-cos(p/3)) -x*x ) ); printf "%0.8f", " "z}'`
echo C $x2 $y_i $z2 >> $nome_xyz

x3=`awk -v a=$x 'BEGIN {x=( 2*a ); printf "%0.8f", x'}`
z3=`awk -v a=$z 'BEGIN {z=( 2*a ); printf "%0.8f", z'}`
echo N $x3 $y_i $z3 >> $nome_xyz

x4=$x3
z4=`awk -v a=$z3 'BEGIN {z=( 2*a ); printf "%0.8f", z}'`
echo C $x4 $y_i $z4 >> $nome_xyz

x5=$x1
z5=`awk -v a=$z1 'BEGIN {z=( 2*a ); printf "%0.8f", z}'`
echo C $x5 $y_i $z5 >> $nome_xyz

x6=$x2
z6=`awk -v a=$z2 'BEGIN {z=( -a ); printf "%0.8f", z}'`
echo N $x6 $y_i $z6 >> $nome_xyz

x7=$x
z7=`awk -v a=$z 'BEGIN {z=( -a ); printf "%0.8f", z}'`
echo N $x7 $y_i $z7 >> $nome_xyz

constante_rede=`awk -v a=$x 'BEGIN {c=( 4*a ); printf "%0.8f", c}'`

vet1=(1.0 0.0 0.0)
vet2=(0.0 0.55 0.0)
vet3=(0.0 0.0 0.8661)

echo "Quantas células unitárias você deseja na LARGURA da folha de grafeno?"
read replic_x
if [[ $replic_x -gt 0 ]]; then
  replic_x=$(($replic_x-1))
else
  echo "ERRO: O número não pode ser menor ou igual a zero"
  exit  
fi  

echo "Quantas células unitárias você deseja no COMPRIMENTO da folha de grafeno?"
read replic_z
if [[ $replic_z -gt 0 ]]; then
  replic_z=$(($replic_z-1))
else
  echo "ERRO: O número não pode ser menor ou igual a zero"
  exit    
fi 

echo "Deseja adicionar uma CAMADA a mais de folhas de grafeno? (S)Sim (N)Não"
read awn1
if [ $awn1 != "N" ] && [ $awn1 != "n" ]; then
  echo "Quantas CAMADAS?"
  read replic_y
  if [[ $replic_y -le 0 ]]; then
    echo "ERRO: O número não pode ser menor ou igual a zero"
    exit 
  fi
else  
  replic_y=0
fi

replic_xyz=`echo "replic_"$nome_xyz`
echo Criando arquivo $nome_xyz
tail -n +3 $nome_xyz | awk '{print $1" "$2" "$3" "$4}' > repli
number_line=`cat -n repli | tail -1 |awk '{print $1}'` 
number_replic=`echo $number_line $replic_x $replic_y $replic_z | awk '{printf "%f", $1 * (($2 + 1) * ($3 + 1) * ($4 + 1))}' | cut -f1 -d"."`
echo -e $number_replic "\n" > $replic_xyz
sed -e "s/\r//g" repli >> replic

echo Calculando vetores
vetor=(0 0 0)
if [ $replic_x -ne 0 ]
then
for ((j=1; j<=$replic_x; ++j))
 do
  calc1=`echo $constante_rede $j | awk '{printf "%f", $1 * $2}'`
  v1=`echo ${vet1[0]} $calc1 | awk '{printf "%f", $1 * $2}'`
  v2=`echo ${vet1[1]} $calc1 | awk '{printf "%f", $1 * $2}'`
  v3=`echo ${vet1[2]} $calc1 | awk '{printf "%f", $1 * $2}'`
  vetor+=($v1 $v2 $v3)
 done
fi
if [ $replic_y -ne 0 ]
then
for ((j=1; j<=$replic_y; ++j))
 do
   calc1=`echo $constante_rede $j | awk '{printf "%f", $1 * $2}'`
   v1=`echo ${vet2[0]} $calc1 | awk '{printf "%f", $1 * $2}'`
   v2=`echo ${vet2[1]} $calc1 | awk '{printf "%f", $1 * $2}'`
   v3=`echo ${vet2[2]} $calc1 | awk '{printf "%f", $1 * $2}'`
   vetor+=($v1 $v2 $v3)
 done
fi
if [ $replic_z -ne 0 ]
then
for ((j=1; j<=$replic_z; ++j))
 do
  calc1=`echo $constante_rede $j | awk '{printf "%f", $1 * $2}'`
  v1=`echo ${vet3[0]} $calc1 | awk '{printf "%f", $1 * $2}'`
  v2=`echo ${vet3[1]} $calc1 | awk '{printf "%f", $1 * $2}'`
  v3=`echo ${vet3[2]} $calc1 | awk '{printf "%f", $1 * $2}'`
  vetor+=($v1 $v2 $v3)
 done
fi

xy=0
xz=0
yz=0
xyz=0

  if [ $replic_x -ne 0 ] && [ $replic_z -ne 0 ]; then 
        for ((x=1; x<=$replic_x; ++x))
        do
          calc1=`echo $constante_rede $x | awk '{printf "%f", $1 * $2}'`
	      for ((z=1; z<=$replic_z; ++z))
          do
	        calc2=`echo $constante_rede $z | awk '{printf "%f", $1 * $2}'`
		    v1=`echo ${vet1[0]} ${vet3[0]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            v2=`echo ${vet1[1]} ${vet3[1]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            v3=`echo ${vet1[2]} ${vet3[2]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            vetor+=($v1 $v2 $v3)
			((++xz))
	      done
       done 
    fi	   
  if [ $replic_x -ne 0 ] && [ $replic_y -ne 0 ]; then
       for ((x=1; x<=$replic_x; ++x))
       do
          calc1=`echo $constante_rede $x | awk '{printf "%f", $1 * $2}'`
	      for ((y=1; y<=$replic_y; ++y))
          do
	        calc2=`echo $constante_rede $y | awk '{printf "%f", $1 * $2}'`
		    v1=`echo ${vet1[0]} ${vet2[0]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            v2=`echo ${vet1[1]} ${vet2[1]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            v3=`echo ${vet1[2]} ${vet2[2]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            vetor+=($v1 $v2 $v3)
			((++xy))
	      done
       done  	 
  fi
  if [ $replic_y -ne 0 ] && [ $replic_z -ne 0 ]; then
     for ((y=1; y<=$replic_y; ++y))
       do
	   
          calc1=`echo $constante_rede $y | awk '{printf "%f", $1 * $2}'`
	      for ((z=1; z<=$replic_z; ++z))
          do
	        calc2=`echo $constante_rede $z | awk '{printf "%f", $1 * $2}'`
		    v1=`echo ${vet2[0]} ${vet3[0]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            v2=`echo ${vet2[1]} ${vet3[1]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            v3=`echo ${vet2[2]} ${vet3[2]} $calc1 $calc2 | awk '{printf "%f", ($1 * $3)+($2 * $4)}'`
            vetor+=($v1 $v2 $v3)
			((++yz))
	      done
     done 
   fi  
   if [ $replic_x -ne 0 ] && [ $replic_y -ne 0 ]  && [ $replic_z -ne 0 ]; then
	    for ((x=1; x<=$replic_x; ++x))
        do
          calc1=`echo $constante_rede $x | awk '{printf "%f", $1 * $2}'`
	      for ((y=1; y<=$replic_y; ++y))
          do
		     calc2=`echo $constante_rede $y | awk '{printf "%f", $1 * $2}'`
		     for ((z=1; z<=$replic_z; ++z))
             do
	           calc3=`echo $constante_rede $z | awk '{printf "%f", $1 * $2}'`
		       v1=`echo ${vet1[0]} ${vet2[0]} ${vet3[0]} $calc1 $calc2 $calc3 | awk '{printf "%f", ($1 * $4)+($2 * $5)+($3 * $6)}'`
               v2=`echo ${vet1[1]} ${vet2[1]} ${vet3[1]} $calc1 $calc2 $calc3 | awk '{printf "%f", ($1 * $4)+($2 * $5)+($3 * $6)}'`
               v3=`echo ${vet1[2]} ${vet2[2]} ${vet3[2]} $calc1 $calc2 $calc3 | awk '{printf "%f", ($1 * $4)+($2 * $5)+($3 * $6)}'`
               vetor+=($v1 $v2 $v3)
			   ((++xyz))
			 done  
	      done
      done  
    fi
echo $(( ${#vetor[*]} / 3 )) vetores serão usados

#v1=`echo ${vet1[0]} ${vet2[0]} ${vet3[0]} | awk '{printf "%f", $1 + $2 + $3}'`
#v2=`echo ${vet1[1]} ${vet2[1]} ${vet3[1]} | awk '{printf "%f", $1 + $2 + $3}'`
#v3=`echo ${vet1[2]} ${vet2[2]} ${vet3[2]} | awk '{printf "%f", $1 + $2 + $3}'`

a=$replic_x
b=$replic_y
c=$replic_z

echo Gerando a estrutura...
for ((k=0; k<${#vetor[*]}; k=$(($k+3))))
do
 if [ $k -ge 3 ]; then
  if [ $a -ne 0 ]; then
     a=$(($a-1))
	 echo Replicando na direção X...
  elif [ $b -ne 0 ]; then
     b=$(($b-1)) 
	 echo Replicando na direção Y...
  elif [ $c -ne 0 ]; then
     c=$(($c-1))  
	 echo Replicando na direção Z...	
  elif [ $xyz -ne 0 ]; then
     xyz=$(($xyz-1))  
	 echo Replicando nas direções X, Y e Z...	
  elif [ $xz -ne 0 ]; then
     xz=$(($xz-1)) 
	 echo Replicando nas direções X e Z...	
  elif [ $xy -ne 0 ]; then
     xy=$(($xy-1))
	 echo Replicando nas direções X e Y...		 
  elif [ $yz -ne 0 ]; then
     yz=$(($yz-1))
	 echo Replicando nas direções Y e Z...	 
  fi
 fi 
 awk -v n="${vetor[$k]}" -v m="${vetor[$((k+1))]}" -v o="${vetor[$((k+2))]}" '{$2=sprintf("%.8f",$2+n);;$3=sprintf("%.8f",$3+m);$4=sprintf("%.8f",$4+o);print}' replic >> $replic_xyz
 #echo ${vetor[$k]} ${vetor[$((k+1))]} ${vetor[$((k+2))]}
done  
  
rm -rf replic repli $nome_xyz
mv $replic_xyz $nome_xyz

#Constante de Rede e Vetores Unitários
if [ $replic_x -ne 0 ]; then
  lattice1=`echo $(($replic_x+1)) $constante_rede | awk '{printf "%f", ($1*$2)}'`
  echo LatticeConstant $lattice1 > lattice_graphene.txt
else  
  if [ $replic_z -ne 0 ]; then
    lattice1=`echo $(($replic_z+1)) $constante_rede ${vet3[2]} | awk '{printf "%f", ($1*$2*$3)}'`
    echo LatticeConstant $lattice1 > lattice_graphene.txt
  else	
    echo LatticeConstant $constante_rede > lattice_graphene.txt
  fi  
fi

echo "%block LatticeVectors" >> lattice_graphene.txt

if [ $replic_z -ne 0 ]; then
  if [ $replic_x -ne 0 ]; then
    lattice3=`echo ${vet3[2]} $(($replic_z+1)) $(($replic_x+1)) $constante_rede | awk '{printf "%f", ($1*$2*$4)/($3*$4)}'`
    lat1="1.0 0.0 0.0"
	lat3="0.0 0.0 ${lattice3}"
  else
    lattice3=`echo ${vet3[2]} $(($replic_z+1)) | awk '{printf "%f", 1/($1*$2)}'`  
    lat1="${lattice3} 0.0 0.0"
    lat3="0.0 0.0 1.0"
  fi	
else  
  lattice3=`echo ${vet3[2]} $(($replic_z+1)) $(($replic_x+1)) $constante_rede | awk '{printf "%f", ($1*$2*$4)/($3*$4)}'`
  lat1="1.0 0.0 0.0"
  lat3="0.0 0.0 ${lattice3}"	
fi

lat2="0.0 5.0 0.0"
#if [ $replic_y -ne 0 ]; then 
#  lattice2=`echo ${vet2[1]} $replic_y | awk '{printf "%f", ($1*$2)}'`  
#  lat2="0.0 5.0 0.0"
#else  
#  lat2="0.0 5.0 0.0"
#fi

echo $lat1 >> lattice_graphene.txt
echo $lat2 >> lattice_graphene.txt
echo $lat3 >> lattice_graphene.txt
echo "%endblock LatticeVectors" >> lattice_graphene.txt

echo -e "\nPronto! A sua folha de grafeno foi salva no arquivo" $nome_xyz
echo -e "\nOs parâmetros da rede cristalina (LatticeConstant e LatticeVectors) foram salvos no arquivo lattice_graphene.txt"